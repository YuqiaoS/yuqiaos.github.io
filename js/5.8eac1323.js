(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[5],{b1481:function(t,n,e){"use strict";e.r(n);var r=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("q-card",[e("q-card-actions",{staticClass:"q-gutter-md"},[e("q-input",{staticStyle:{width:"120px"},attrs:{square:"",filled:"",label:"Number of items",type:"number",min:"0",maxlength:"100"},model:{value:t.numOfItems,callback:function(n){t.numOfItems=t._n(n)},expression:"numOfItems"}}),e("q-btn",{attrs:{color:"orange-5"},on:{click:t.shuffle}},[t._v("Shuffle")]),e("q-btn-group",{attrs:{flat:""}},[e("q-btn",{attrs:{outline:"",color:"light-green-9"},on:{click:function(n){return t.doSort("selection")}}},[t._v("Selection sort")]),e("q-btn",{attrs:{outline:"",color:"light-green-9"},on:{click:function(n){return t.doSort("insertion")}}},[t._v("Insertion sort")]),e("q-btn",{attrs:{outline:"",color:"light-green-9"},on:{click:function(n){return t.doSort("merge")}}},[t._v("Merge sort")])],1),e("q-btn",{class:t.uiCodeColor,attrs:{color:""},on:{click:function(n){t.showCodeDialog=!0}}},[t._v("Code")]),e("q-dialog",{model:{value:t.showCodeDialog,callback:function(n){t.showCodeDialog=n},expression:"showCodeDialog"}},[e("q-card",{staticStyle:{width:"700px","max-width":"80vw"}},[e("q-card-section",{staticClass:"row items-center",class:t.uiCodeColor},[e("div",{staticClass:"text-h6"},[t._v("Sorting generators")]),e("q-space"),e("q-btn",{directives:[{name:"close-popup",rawName:"v-close-popup"}],attrs:{flat:"",dense:"",icon:"close"}})],1),e("q-card-section",{staticClass:"q-py-none"},[e("highlightjs",{attrs:{langugage:"javascript",code:t.sortingCode}})],1)],1)],1)],1),e("q-chip",{attrs:{icon:"timer",label:"sorting time (not including canvas drawing):  ",color:"light-green"}},[t._v(" "+t._s(t.timer)+" ms ")]),e("q-card-section",{staticClass:"row"},[e("div",{staticClass:"col"},[e("canvas",{ref:"canvas",staticClass:"c-canvas",attrs:{height:t.canvasHeight,width:t.canvasWidth}})])])],1)},i=[],s=(e("e6cf"),e("ddb0"),e("2ef0"));const o=function*(t){let n,e;t.length<=1&&(yield);for(let r=0;r<t.length;r++){e=r;for(let n=r+1;n<t.length;n++)t[n]<t[e]&&(e=n);n=t[e],t[e]=t[r],t[r]=n,yield}},a=function*(t){let n,e;for(let r=1;r<t.length;r++){for(n=t[r],e=r-1;e>=0;e--){if(!(t[e]>n))break;t[e+1]=t[e],t[e]=n}yield}};let l;const c=function*(t){l=Array.from(t);for(const n of m(t,0,t.length-1))yield},m=function*(t,n,e){if(e<=n)return;const r=n+parseInt((e-n)/2);yield*m(t,n,r),yield*m(t,r+1,e),h(t,n,r,e),yield},h=function(t,n,e,r){let i=n,s=e+1;for(let o=n;o<=r;o++)l[o]=t[o];for(let o=n;o<=r;o++)i>e?t[o]=l[s++]:s>r||l[i]<l[s]?t[o]=l[i++]:t[o]=l[s++]},d=function(t,n=t.length){let e,r,i;while(n-- >0)[e,r]=[Math.floor(Math.random()*t.length),Math.floor(Math.random()*t.length)],i=t[e],t[e]=t[r],t[r]=i;console.log(t)};var f="const selectionSort = function* (items) {\r\n  if (items.length <= 1) {\r\n    yield\r\n  }\r\n\r\n  let minValue, minIndex\r\n  for (let i = 0; i < items.length; i++) {\r\n    minIndex = i\r\n    for (let j = i + 1; j < items.length; j++) {\r\n      if (items[j] < items[minIndex]) {\r\n        minIndex = j\r\n      }\r\n    }\r\n    minValue = items[minIndex]\r\n    items[minIndex] = items[i]\r\n    items[i] = minValue\r\n\r\n    yield\r\n  }\r\n}\r\n\r\nconst insertionSort = function* (items) {\r\n  let curVal\r\n  let j\r\n  for (let i = 1; i < items.length; i++) {\r\n    curVal = items[i]\r\n    for (j = i - 1; j >= 0; j--) {\r\n      if (items[j] > curVal) {\r\n        items[j + 1] = items[j]\r\n      } else {\r\n        break\r\n      }\r\n      items[j] = curVal\r\n    }\r\n\r\n    yield\r\n  }\r\n}\r\n\r\nlet _aux\r\n\r\nconst mergeSort = function* (items) {\r\n  _aux = Array.from(items)\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  for (const _ of _mergeSort(items, 0, items.length - 1)) {\r\n    yield\r\n  }\r\n}\r\n\r\nconst _mergeSort = function* (items, lo, hi) {\r\n  if (hi <= lo) return\r\n  const mid = lo + parseInt((hi - lo) / 2)\r\n  yield * _mergeSort(items, lo, mid)\r\n  yield * _mergeSort(items, mid + 1, hi)\r\n  _merge(items, lo, mid, hi)\r\n  yield\r\n}\r\nconst _merge = function (items, lo, mid, hi) {\r\n  let i = lo, j = mid + 1\r\n  for (let k = lo; k <= hi; k++) {\r\n    _aux[k] = items[k]\r\n  }\r\n\r\n  for (let k = lo; k <= hi; k++) {\r\n    if (i > mid) items[k] = _aux[j++]\r\n    else if (j > hi) items[k] = _aux[i++]\r\n    else if (_aux[i] < _aux[j]) items[k] = _aux[i++]\r\n    else items[k] = _aux[j++]\r\n  }\r\n}\r\n\r\n// const items = [...Array(5).keys()]\r\n\r\nconst shuffle = function (arr, numShuffles = arr.length) {\r\n  let tmp1, tmp2\r\n  let tmp1Val\r\n\r\n  while (numShuffles-- > 0) {\r\n    [tmp1, tmp2] = [Math.floor(Math.random() * arr.length),\r\n      Math.floor(Math.random() * arr.length)\r\n    ]\r\n    tmp1Val = arr[tmp1]\r\n    arr[tmp1] = arr[tmp2]\r\n    arr[tmp2] = tmp1Val\r\n  }\r\n  console.log(arr)\r\n}\r\n\r\nexport {\r\n  shuffle,\r\n  selectionSort,\r\n  insertionSort,\r\n  mergeSort\r\n}\r\n";const u={insertion:a,selection:o,merge:c};var g={name:"Algorithms",data(){return{canvasHeight:500,canvasWidth:500,animateWait:100,ctx:null,items:Object(s["range"])(1,21),timer:0,sortingCode:f,showCodeDialog:!1}},computed:{numOfItems:{get(){return this.items.length},set(t){this.items=Object(s["range"])(1,t+1)}},barUnitScale(){return this.canvasHeight/this.numOfItems},barWidth(){return 4*this.barUnitScale/5},barGap(){return 1*this.barUnitScale/5}},methods:{shuffle(){this.items=Object(s["range"])(1,this.numOfItems+1),d(this.items),this.drawCanvas(this.items)},async doSort(t){const n=u[t];if(void 0===n)return;this.timer=0;let e=performance.now();for(const r of n(this.items))this.timer+=performance.now()-e,await this.drawCanvas(this.items),e=performance.now();console.log("Timer: ",this.timer)},async drawCanvas(t){this.ctx.clearRect(0,0,this.canvasWidth,this.canvasWidth);let n=0;for(const e of t)this.ctx.fillRect(n,this.canvasHeight,this.barWidth,-e*this.barUnitScale),n+=this.barUnitScale;await new Promise(((t,n)=>setTimeout(t,this.animateWait)))}},created(){this.sortingCode=f,this.uiCodeColor="bg-indigo-5 text-white"},mounted(){this.ctx=this.$refs.canvas.getContext("2d"),this.ctx.fillStyle="#62717f",this.drawCanvas(this.items)}},p=g,v=e("2877"),b=e("f09f"),w=e("4b7e"),x=e("27f9"),C=e("9c40"),S=e("e7a9"),_=e("24e8"),y=e("a370"),j=e("2c91"),k=e("b047"),q=e("7f67"),I=e("eebe"),O=e.n(I),V=Object(v["a"])(p,r,i,!1,null,null,null);n["default"]=V.exports;O()(V,"components",{QCard:b["a"],QCardActions:w["a"],QInput:x["a"],QBtn:C["a"],QBtnGroup:S["a"],QDialog:_["a"],QCardSection:y["a"],QSpace:j["a"],QChip:k["a"]}),O()(V,"directives",{ClosePopup:q["a"]})}}]);